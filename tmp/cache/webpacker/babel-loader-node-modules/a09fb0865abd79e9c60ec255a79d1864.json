{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { Table, message, Popconfirm } from \"antd\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react/cjs/react.production.min\";\n\nvar Brand = function Brand() {\n  //  const \tcolumns = [\n  //     {\n  //         title: \"Brand\",\n  //         dataIndex: \"brand\",\n  //         key: \"brand\",\n  //     },\n  //     {\n  //         title: \"Country\",\n  //         dataIndex: \"country\",\n  //         key: \"country\",\n  //     },\n  //     {\n  //         title: \"Description\",\n  //         dataIndex: \"description\",\n  //         key: \"Description\",\n  //     },\n  //     {\n  //         title: \"\",\n  //         key: \"action\",\n  //         render: (_text, record) => (\n  //             <Popconfirm\n  //                 title=\"Are you sure delete this beer?\"\n  //                 onConfirm={() => deleteBeer(record.id)}\n  //                 okText=\"Yes\"\n  //                 cancelText=\"No\"\n  //             >\n  //                 <a href=\"#\" type=\"danger\">\n  //                     Delete{\" \"}\n  //                 </a>\n  //             </Popconfirm>\n  //         ),\n  //     },\n  // ];\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      brand = _useState2[0],\n      setBrand = _useState2[1]; // const loadBrand = () => {\n  //     const url = \"api/v1/brands\";\n  //     fetch(url)\n  //         .then((data) => {\n  //             if (data.ok) {\n  //                 return data.json();\n  //             }\n  //             throw new Error(\"Network error.\");\n  //         })\n  //         .then((data) => {\n  //             data.forEach((brand) => {\n  //                 const newEl = {\n  //                     key: brand.id,\n  //                     id: brand.id,\n  //                     name:brand.name,\n  //                     country:brand.country,\n  //                     description:brand.description\n  //                 };\n  //                 setBrand(...brand, newEl);\n  //             });\n  //         })\n  //         .catch((err) => message.error(\"Error: \" + err));\n  // };\n  // useEffect(()=>{\n  //     loadBrand();\n  // },[])\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"brand PAge\");\n};\n\nexport default Brand;","map":{"version":3,"sources":["/home/umar/devbox/crud-rails-react/app/javascript/components/Brand/index.jsx"],"names":["Table","message","Popconfirm","React","useEffect","useState","Brand","brand","setBrand"],"mappings":";;;;;;;;;;;;AAAA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,UAAzB,QAA2C,MAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,gCAApC;;AAIA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCkB,kBAkCOD,QAAQ,EAlCf;AAAA;AAAA,MAkCXE,KAlCW;AAAA,MAkCLC,QAlCK,kBAoClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEI,sBACI,uDADJ;AAcH,CAhFD;;AAkFA,eAAeF,KAAf","sourcesContent":["import { Table, message, Popconfirm } from \"antd\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react/cjs/react.production.min\";\n\n\n\nconst Brand = ()=>{\n//  const \tcolumns = [\n//     {\n//         title: \"Brand\",\n//         dataIndex: \"brand\",\n//         key: \"brand\",\n//     },\n//     {\n//         title: \"Country\",\n//         dataIndex: \"country\",\n//         key: \"country\",\n//     },\n//     {\n//         title: \"Description\",\n//         dataIndex: \"description\",\n//         key: \"Description\",\n//     },\n//     {\n//         title: \"\",\n//         key: \"action\",\n//         render: (_text, record) => (\n//             <Popconfirm\n//                 title=\"Are you sure delete this beer?\"\n//                 onConfirm={() => deleteBeer(record.id)}\n//                 okText=\"Yes\"\n//                 cancelText=\"No\"\n//             >\n//                 <a href=\"#\" type=\"danger\">\n//                     Delete{\" \"}\n//                 </a>\n//             </Popconfirm>\n//         ),\n//     },\n// ];\nconst [brand,setBrand] = useState()\n\n// const loadBrand = () => {\n//     const url = \"api/v1/brands\";\n//     fetch(url)\n//         .then((data) => {\n//             if (data.ok) {\n//                 return data.json();\n//             }\n//             throw new Error(\"Network error.\");\n//         })\n//         .then((data) => {\n//             data.forEach((brand) => {\n//                 const newEl = {\n//                     key: brand.id,\n//                     id: brand.id,\n//                     name:brand.name,\n//                     country:brand.country,\n//                     description:brand.description\n                    \n//                 };\n\n//                 setBrand(...brand, newEl);\n//             });\n//         })\n//         .catch((err) => message.error(\"Error: \" + err));\n// };\n\n// useEffect(()=>{\n//     loadBrand();\n// },[])\n\n    return (\n        <>\n        \n        {/* <Table\n\t\t\t\t\tclassName=\"table-striped-rows\"\n\t\t\t\t\tdataSource={brand}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tpagination={{ pageSize: 5 }}\n\t\t\t\t/> */}\n\n                brand PAge\n        \n        </>\n    )\n}\n\nexport default Brand;"]},"metadata":{},"sourceType":"module"}