<style>
/* Add this CSS to center the modal on the screen */
.modal-dialog {
  display: flex;
  align-items: center;
  min-height: calc(100vh - 1rem);
}

.modal-content {
  width: 100%;
  max-width: 500px; /* You can adjust this width as needed */
  margin: auto;
}


</style>
<h3><b>Product Categories</b></h3>
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
  Create
</button>
<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">New Product Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <%= form_with(model: @product_category, url: product_categories_path) do |form| %>
        <div class="modal-body">
            <%= form.text_field :title, class: "form-control", placeholder: "Category Title", required: true %>
            <%= form.text_field :description, class: "form-control", placeholder: "Description" %>
            <%= form.hidden_field :id %>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <%= form.submit "Save", class: "btn btn-primary" %>
        </div>
      <% end %>
    </div>
  </div>
</div>
<div class="mt-3">
  <div class="card">
    <div class="card-body">
      <div class="table-responsive">
        <table class="table">
          <thead class="bg-dark text-light">
            <tr>
              <th scope="col">ID</th>
              <th scope="col">Image</th>
              <th scope="col">Title</th>
              <th scope="col">Status</th>
              <th scope="col">Description</th>
              <th scope="col">Created at</th>
              <th scope="col">Updated at</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody>
            <% @product_categories&.each do |product_category| %>
              <tr>
                <td><%= product_category.id %></td>
                <td>
                  <% if product_category.active_image.persisted? %>
                    <%= image_tag(product_category.active_image, width: 50, height: 50)%>
                  <% end %>  
                </td>
                <td><%= product_category.title %></td>
                <td><%= product_category.status %></td>
                <td><%= product_category.description %></td>
                <td><%= product_category.created_at.strftime("%d/%b/%y at %I:%M %p") %></td>
                <td><%= product_category.updated_at.strftime("%d/%b/%y at %I:%M %p") %></td>
                <td>
                  <div class="d-flex justify-content-between">
                    <%= link_to "Edit", "#", class: "btn btn-sm btn-primary edit-product-category px-2 mr-2", data: { id: product_category.id } %>
                    <%= link_to "Delete", "#", class: "btn btn-sm btn-danger delete-product-category ml-2", data: { id: product_category.id } %>
                  </div>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>


<script>
  // app/assets/javascripts/product_categories.js
document.addEventListener("DOMContentLoaded", function() {
  const deleteButtons = document.querySelectorAll(".delete-product-category");
  const createForm = document.querySelector("#new_product_category"); // Select the form by its ID


  deleteButtons.forEach(button => {
    button.addEventListener("click", function(e) {
      e.preventDefault();
      const categoryId = this.getAttribute("data-id");

      if (confirm("Are you sure you want to delete this category?")) {
        deleteCategory(categoryId);
      }
    });
  });

  

  function deleteCategory(categoryId) {
    fetch(`/product_categories/${categoryId}`, {
      method: "DELETE",
      headers: {
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute("content"),
        "Content-Type": "application/json",
      },
    })
      .then(response => response.json())
      .then(data => {
        if (data.status === "success") {
          // Category was deleted successfully, update the table
          const deletedRow = document.querySelector(`tr[data-id="${categoryId}"]`);
          if (deletedRow) {
            deletedRow.remove();
          }
        } else {
          // Handle the error (optional)
          alert("Error occurred while deleting the category.");
        }
      })
      .catch(error => {
        // Handle fetch error (optional)
        console.error("Error occurred while fetching data:", error);
      });
  }
});

document.addEventListener("DOMContentLoaded", function() {
  const createForm = document.querySelector("#new_product_category");
  const modal = new bootstrap.Modal(document.getElementById("staticBackdrop"));

  createForm.addEventListener("submit", function(event) {
    event.preventDefault();
    // Assuming you're using Rails' unobtrusive scripting adapter
    Rails.fire(createForm, "submit");
    modal.hide();
  });
});





</script>